/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface SddsBadges {
        /**
          * !!Deprecated!! Use size prop instead. Changes badge from default to small size
         */
        "isSmall": boolean;
        /**
          * Changes visibility of badge
         */
        "isVisible": boolean;
        /**
          * Component is available in size default and small (small dot). Default size is default
         */
        "size": 'default' | 'sm';
        /**
          * Value shown in badge
         */
        "value": string;
    }
    interface SddsTextarea {
        /**
          * Control of autofocus
         */
        "autofocus": boolean;
        /**
          * Textarea cols attribute
         */
        "cols": number;
        /**
          * Set input in disabled state
         */
        "disabled": boolean;
        /**
          * Helper text
         */
        "helper": string;
        /**
          * Label text
         */
        "label": string;
        /**
          * Label position: `no-label` (default), `inside`, `outside`
         */
        "labelPosition": string;
        /**
          * Max length of input
         */
        "maxlength": number;
        /**
          * Name attribute
         */
        "name": string;
        /**
          * Placeholder text
         */
        "placeholder": string;
        /**
          * Set input in readonly state
         */
        "readonly": boolean;
        /**
          * Textarea rows attribute
         */
        "rows": number;
        /**
          * Error state of input
         */
        "state": string;
        /**
          * Value of the input text
         */
        "value": string;
    }
    interface SddsTextfield {
        /**
          * Autofocus for input
         */
        "autofocus": boolean;
        /**
          * Set input in disabled state
         */
        "disabled": boolean;
        /**
          * Label that will be put inside the input
         */
        "labelInside": string;
        /**
          * Max length of input
         */
        "maxlength": number;
        /**
          * Name property
         */
        "name": string;
        /**
          * With setting
         */
        "nominwidth": boolean;
        /**
          * Placeholder text
         */
        "placeholder": string;
        /**
          * Set input in readonly state
         */
        "readonly": boolean;
        /**
          * Size of the input
         */
        "size": 'sm' | 'md' | '';
        /**
          * Error state of input
         */
        "state": string;
        /**
          * Which input type, text, password or similar
         */
        "type": string;
        /**
          * Value of the input text
         */
        "value": string;
    }
}
export interface SddsTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSddsTextareaElement;
}
export interface SddsTextfieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSddsTextfieldElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSddsBadgesElement extends Components.SddsBadges, HTMLStencilElement {
    }
    var HTMLSddsBadgesElement: {
        prototype: HTMLSddsBadgesElement;
        new (): HTMLSddsBadgesElement;
    };
    interface HTMLSddsTextareaElement extends Components.SddsTextarea, HTMLStencilElement {
    }
    var HTMLSddsTextareaElement: {
        prototype: HTMLSddsTextareaElement;
        new (): HTMLSddsTextareaElement;
    };
    interface HTMLSddsTextfieldElement extends Components.SddsTextfield, HTMLStencilElement {
    }
    var HTMLSddsTextfieldElement: {
        prototype: HTMLSddsTextfieldElement;
        new (): HTMLSddsTextfieldElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "sdds-badges": HTMLSddsBadgesElement;
        "sdds-textarea": HTMLSddsTextareaElement;
        "sdds-textfield": HTMLSddsTextfieldElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface SddsBadges {
        /**
          * !!Deprecated!! Use size prop instead. Changes badge from default to small size
         */
        "isSmall"?: boolean;
        /**
          * Changes visibility of badge
         */
        "isVisible"?: boolean;
        /**
          * Component is available in size default and small (small dot). Default size is default
         */
        "size"?: 'default' | 'sm';
        /**
          * Value shown in badge
         */
        "value"?: string;
    }
    interface SddsTextarea {
        /**
          * Control of autofocus
         */
        "autofocus"?: boolean;
        /**
          * Textarea cols attribute
         */
        "cols"?: number;
        /**
          * Set input in disabled state
         */
        "disabled"?: boolean;
        /**
          * Helper text
         */
        "helper"?: string;
        /**
          * Label text
         */
        "label"?: string;
        /**
          * Label position: `no-label` (default), `inside`, `outside`
         */
        "labelPosition"?: string;
        /**
          * Max length of input
         */
        "maxlength"?: number;
        /**
          * Name attribute
         */
        "name"?: string;
        /**
          * Change event for the textarea
         */
        "onCustomChange"?: (event: SddsTextareaCustomEvent<any>) => void;
        /**
          * Placeholder text
         */
        "placeholder"?: string;
        /**
          * Set input in readonly state
         */
        "readonly"?: boolean;
        /**
          * Textarea rows attribute
         */
        "rows"?: number;
        /**
          * Error state of input
         */
        "state"?: string;
        /**
          * Value of the input text
         */
        "value"?: string;
    }
    interface SddsTextfield {
        /**
          * Autofocus for input
         */
        "autofocus"?: boolean;
        /**
          * Set input in disabled state
         */
        "disabled"?: boolean;
        /**
          * Label that will be put inside the input
         */
        "labelInside"?: string;
        /**
          * Max length of input
         */
        "maxlength"?: number;
        /**
          * Name property
         */
        "name"?: string;
        /**
          * With setting
         */
        "nominwidth"?: boolean;
        /**
          * Change event for the textfield
         */
        "onCustomChange"?: (event: SddsTextfieldCustomEvent<any>) => void;
        /**
          * Placeholder text
         */
        "placeholder"?: string;
        /**
          * Set input in readonly state
         */
        "readonly"?: boolean;
        /**
          * Size of the input
         */
        "size"?: 'sm' | 'md' | '';
        /**
          * Error state of input
         */
        "state"?: string;
        /**
          * Which input type, text, password or similar
         */
        "type"?: string;
        /**
          * Value of the input text
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "sdds-badges": SddsBadges;
        "sdds-textarea": SddsTextarea;
        "sdds-textfield": SddsTextfield;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "sdds-badges": LocalJSX.SddsBadges & JSXBase.HTMLAttributes<HTMLSddsBadgesElement>;
            "sdds-textarea": LocalJSX.SddsTextarea & JSXBase.HTMLAttributes<HTMLSddsTextareaElement>;
            "sdds-textfield": LocalJSX.SddsTextfield & JSXBase.HTMLAttributes<HTMLSddsTextfieldElement>;
        }
    }
}
